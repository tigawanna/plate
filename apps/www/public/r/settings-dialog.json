{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "settings-dialog",
  "type": "registry:component",
  "dependencies": [
    "@platejs/ai"
  ],
  "registryDependencies": [
    "https://platejs.org/r/ai-kit",
    "button",
    "command",
    "dialog",
    "input",
    "popover"
  ],
  "files": [
    {
      "path": "src/registry/components/editor/settings-dialog.tsx",
      "content": "'use client';\n\n/* DEMO ONLY, DO NOT USE IN PRODUCTION */\n\nimport * as React from 'react';\n\nimport { CopilotPlugin } from '@platejs/ai/react';\nimport {\n  Check,\n  ChevronsUpDown,\n  ExternalLinkIcon,\n  Eye,\n  EyeOff,\n  Settings,\n  Wand2Icon,\n} from 'lucide-react';\nimport { useEditorRef } from 'platejs/react';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from '@/components/ui/command';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport { cn } from '@/lib/utils';\nimport { aiChatPlugin } from '@/registry/components/editor/plugins/ai-kit';\n\ninterface Model {\n  label: string;\n  value: string;\n}\n\nexport const models: Model[] = [\n  { label: 'gpt-4o-mini', value: 'gpt-4o-mini' },\n  { label: 'gpt-4o', value: 'gpt-4o' },\n  { label: 'gpt-4-turbo', value: 'gpt-4-turbo' },\n  { label: 'gpt-4', value: 'gpt-4' },\n  { label: 'gpt-3.5-turbo', value: 'gpt-3.5-turbo' },\n  { label: 'gpt-3.5-turbo-instruct', value: 'gpt-3.5-turbo-instruct' },\n];\n\nexport function SettingsDialog() {\n  const editor = useEditorRef();\n\n  const [tempModel, setTempModel] = React.useState(models[0]);\n  const [tempKeys, setTempKeys] = React.useState<Record<string, string>>({\n    openai: '',\n    uploadthing: '',\n  });\n  const [showKey, setShowKey] = React.useState<Record<string, boolean>>({});\n  const [open, setOpen] = React.useState(false);\n  const [openModel, setOpenModel] = React.useState(false);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    // Update AI chat options\n    const chatOptions = editor.getOptions(aiChatPlugin).chatOptions ?? {};\n\n    editor.setOption(aiChatPlugin, 'chatOptions', {\n      ...chatOptions,\n      body: {\n        ...chatOptions.body,\n        apiKey: tempKeys.openai,\n        model: tempModel.value,\n      },\n    });\n\n    setOpen(false);\n\n    // Update AI complete options\n    const completeOptions =\n      editor.getOptions(CopilotPlugin).completeOptions ?? {};\n    editor.setOption(CopilotPlugin, 'completeOptions', {\n      ...completeOptions,\n      body: {\n        ...completeOptions.body,\n        apiKey: tempKeys.openai,\n        model: tempModel.value,\n      },\n    });\n  };\n\n  const toggleKeyVisibility = (key: string) => {\n    setShowKey((prev) => ({ ...prev, [key]: !prev[key] }));\n  };\n\n  const renderApiKeyInput = (service: string, label: string) => (\n    <div className=\"group relative\">\n      <div className=\"flex items-center justify-between\">\n        <label\n          className=\"absolute top-1/2 block -translate-y-1/2 cursor-text px-1 text-sm text-muted-foreground/70 transition-all group-focus-within:pointer-events-none group-focus-within:top-0 group-focus-within:cursor-default group-focus-within:text-xs group-focus-within:font-medium group-focus-within:text-foreground has-[+input:not(:placeholder-shown)]:pointer-events-none has-[+input:not(:placeholder-shown)]:top-0 has-[+input:not(:placeholder-shown)]:cursor-default has-[+input:not(:placeholder-shown)]:text-xs has-[+input:not(:placeholder-shown)]:font-medium has-[+input:not(:placeholder-shown)]:text-foreground\"\n          htmlFor={label}\n        >\n          <span className=\"inline-flex bg-background px-2\">{label}</span>\n        </label>\n        <Button\n          asChild\n          size=\"icon\"\n          variant=\"ghost\"\n          className=\"absolute top-0 right-[28px] h-full\"\n        >\n          <a\n            className=\"flex items-center\"\n            href={\n              service === 'openai'\n                ? 'https://platform.openai.com/api-keys'\n                : 'https://uploadthing.com/dashboard'\n            }\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            <ExternalLinkIcon className=\"size-4\" />\n            <span className=\"sr-only\">Get {label}</span>\n          </a>\n        </Button>\n      </div>\n\n      <Input\n        id={label}\n        className=\"pr-10\"\n        value={tempKeys[service]}\n        onChange={(e) =>\n          setTempKeys((prev) => ({ ...prev, [service]: e.target.value }))\n        }\n        placeholder=\"\"\n        data-1p-ignore\n        type={showKey[service] ? 'text' : 'password'}\n      />\n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        className=\"absolute top-0 right-0 h-full\"\n        onClick={() => toggleKeyVisibility(service)}\n        type=\"button\"\n      >\n        {showKey[service] ? (\n          <EyeOff className=\"size-4\" />\n        ) : (\n          <Eye className=\"size-4\" />\n        )}\n        <span className=\"sr-only\">\n          {showKey[service] ? 'Hide' : 'Show'} {label}\n        </span>\n      </Button>\n    </div>\n  );\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button\n          size=\"icon\"\n          variant=\"default\"\n          className={cn(\n            'group fixed right-4 bottom-4 z-50 size-10 overflow-hidden',\n            'rounded-full shadow-md hover:shadow-lg'\n          )}\n          // data-block-hide\n        >\n          <Settings className=\"size-4\" />\n        </Button>\n      </DialogTrigger>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle className=\"text-xl\">Settings</DialogTitle>\n          <DialogDescription>\n            Configure your API keys and preferences.\n          </DialogDescription>\n        </DialogHeader>\n\n        <form className=\"space-y-10\" onSubmit={handleSubmit}>\n          {/* AI Settings Group */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"size-8 rounded-full bg-purple-100 p-2 dark:bg-purple-900\">\n                <Wand2Icon className=\"size-4 text-purple-600 dark:text-purple-400\" />\n              </div>\n              <h4 className=\"font-semibold\">AI</h4>\n            </div>\n\n            <div className=\"space-y-4\">\n              {renderApiKeyInput('openai', 'OpenAI API key')}\n\n              <div className=\"group relative\">\n                <label\n                  className=\"absolute start-1 top-0 z-10 block -translate-y-1/2 bg-background px-2 text-xs font-medium text-foreground group-has-disabled:opacity-50\"\n                  htmlFor=\"select-model\"\n                >\n                  Model\n                </label>\n                <Popover open={openModel} onOpenChange={setOpenModel}>\n                  <PopoverTrigger id=\"select-model\" asChild>\n                    <Button\n                      size=\"lg\"\n                      variant=\"outline\"\n                      className=\"w-full justify-between\"\n                      aria-expanded={openModel}\n                      role=\"combobox\"\n                    >\n                      <code>{tempModel.label}</code>\n                      <ChevronsUpDown className=\"ml-2 size-4 shrink-0 opacity-50\" />\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-full p-0\">\n                    <Command>\n                      <CommandInput placeholder=\"Search model...\" />\n                      <CommandEmpty>No model found.</CommandEmpty>\n                      <CommandList>\n                        <CommandGroup>\n                          {models.map((m) => (\n                            <CommandItem\n                              key={m.value}\n                              value={m.value}\n                              onSelect={() => {\n                                setTempModel(m);\n                                setOpenModel(false);\n                              }}\n                            >\n                              <Check\n                                className={cn(\n                                  'mr-2 size-4',\n                                  tempModel.value === m.value\n                                    ? 'opacity-100'\n                                    : 'opacity-0'\n                                )}\n                              />\n                              <code>{m.label}</code>\n                            </CommandItem>\n                          ))}\n                        </CommandGroup>\n                      </CommandList>\n                    </Command>\n                  </PopoverContent>\n                </Popover>\n              </div>\n            </div>\n          </div>\n\n          {/* Upload Settings Group */}\n          {/* <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"size-8 rounded-full bg-red-100 p-2 dark:bg-red-900\">\n                <Upload className=\"size-4 text-red-600 dark:text-red-400\" />\n              </div>\n              <h4 className=\"font-semibold\">Upload</h4>\n            </div>\n\n            <div className=\"space-y-4\">\n              {renderApiKeyInput('uploadthing', 'Uploadthing API key')}\n            </div>\n          </div> */}\n\n          <Button size=\"lg\" className=\"w-full\" type=\"submit\">\n            Save changes\n          </Button>\n        </form>\n\n        <p className=\"text-sm text-muted-foreground\">\n          Not stored anywhere. Used only for current session requests.\n        </p>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}